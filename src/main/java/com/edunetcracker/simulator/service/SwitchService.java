package com.edunetcracker.simulator.service;

import com.edunetcracker.simulator.database.repository.networkElementRepository.SwitchRepository;
import com.edunetcracker.simulator.model.element.Switch;
import com.edunetcracker.simulator.service.configurers.SwitchConfigurer;
import com.edunetcracker.simulator.service.status.SequenceStatus;
import lombok.Getter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import sun.reflect.generics.reflectiveObjects.NotImplementedException;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class SwitchService extends DBService<Switch> {

    @Autowired
    private SwitchRepository switchRepository;

    @Autowired
    private SwitchConfigurer switchConfigurer;
    @Getter
    private List<Switch> loadedSwitches = new ArrayList<>();

    @Override
    public Switch getLoaded(long id) {
        for (Switch switchEl : loadedSwitches) {
            if (switchEl.getIdNE() == id) {
                return switchEl;
            }
        }
        return null;
    }

    @Override
    public Switch get(long id) {
        Switch loadedSwitch = getLoaded(id);
        if (null != loadedSwitch) {
            return loadedSwitch;
        }
        Optional<Switch> newlyLoaded = switchRepository.findByIdNE(id);
        if (!newlyLoaded.isPresent()) {
            SequenceStatus.NOT_FOUND_IN_DATABASE.logWarning("Switch", id);
            return null;
        }
        loadedSwitches.add(newlyLoaded.get());
        return newlyLoaded.get();
    }

    @Override
    public SequenceStatus create(Switch switchEl) {
        if (null == switchEl) {
            SequenceStatus.NULL_POINTER.logError("saveSwitch", "switchEl");
            throw new NullPointerException();
        }
        long instanceId = switchEl.getIdNE();
        if (instanceId != 0) {
            SequenceStatus.UNEXPECTED_FIELD_VALUE.logError("0", "idNE", "switchEl");
            throw new IllegalArgumentException();
        }
        loadedSwitches.add(switchEl);
        update(switchEl);
        return SequenceStatus.OK;
    }

    @Override
    public Switch update(Switch switchEl) {
        if (null == switchEl) {
            SequenceStatus.NULL_POINTER.logError("updateInDB", "switchEl");
            throw new NullPointerException();
        }
        if (null == getLoaded(switchEl.getIdNE())) {
            SequenceStatus.UNTRACKED_DB_OBJECT.logError("Switch");
            loadedSwitches.add(switchEl);
        }
        Switch savedSwitch = switchRepository.save(switchEl);

        if (savedSwitch != switchEl) {
            switchEl.copyAutogeneratedValues(savedSwitch);
        }
        return switchEl;
    }

    @Override
    public void addToLoaded(Switch instance) {
        if (null == instance) {
            SequenceStatus.NULL_POINTER.logError("addToLoaded", "instance");
            throw new NullPointerException();
        }
        if (loadedSwitches.contains(instance)) {
            return;
        }
        loadedSwitches.add(instance);
    }

    @Override
    public void unload(Switch instance) {
        if (null == instance) {
            SequenceStatus.NULL_POINTER.logError("unload", "instance");
            throw new NullPointerException();
        }
        if (!loadedSwitches.contains(instance)) {
            SequenceStatus.UNTRACKED_DB_OBJECT.logError("SwitchService");
            return;
        }
        loadedSwitches.remove(instance);
    }

    @Override
    public void drop(Switch instance) {
        if (null == instance) {
            SequenceStatus.NULL_POINTER.logError("dropFromDB", "instance");
            throw new NullPointerException();
        }
        switchRepository.delete(instance);
    }

    @Override
    public SequenceStatus delete(Switch instance) {
        throw new NotImplementedException();
    }
}
