package com.edunetcracker.simulator.service;

import com.edunetcracker.simulator.database.repository.LinkRepository;
import com.edunetcracker.simulator.model.Link;
import com.edunetcracker.simulator.model.port.Port;
import com.edunetcracker.simulator.service.status.SequenceStatus;
import lombok.Getter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class LinkService extends DBService<Link> {
    Logger logger = LoggerFactory.getLogger(LinkService.class);

    @Autowired
    private LinkRepository linkRepository;
    @Autowired
    private PortService portService;

    @Getter
    private List<Link> loadedLinks = new ArrayList<>();

    @Override
    public Link getLoaded(long id) {
        for (Link link : loadedLinks) {
            if (link.getId() == id) {
                return link;
            }
        }
        return null;
    }

    @Override
    public Link get(long id) {
        Link loadedLink = getLoaded(id);
        if (null != loadedLink) {
            return loadedLink;
        }
        Optional<Link> newlyLoaded = linkRepository.findById(id);
        if (!newlyLoaded.isPresent()) {
            SequenceStatus.NOT_FOUND_IN_DATABASE.logWarning("Link", id);
            return null;
        }
        loadedLinks.add(newlyLoaded.get());
        return newlyLoaded.get();
    }

    @Override
    public SequenceStatus create(Link link) {
        if (null == link) {
            SequenceStatus.NULL_POINTER.logError("saveLink", "link");
            throw new NullPointerException();
        }
        long instanceId = link.getId();
        if (instanceId != 0) {
            SequenceStatus.UNEXPECTED_FIELD_VALUE.logError("0", "Link", "saveNew");
            return SequenceStatus.UNEXPECTED_FIELD_VALUE;
        }
        loadedLinks.add(link);
        update(link);
        return SequenceStatus.OK;
    }

    @Override
    public Link update(Link link) {
        if (null == link) {
            SequenceStatus.NULL_POINTER.logError("updateLink", "link");
            throw new NullPointerException();
        }
        if (null == getLoaded(link.getId())) {
            SequenceStatus.UNTRACKED_DB_OBJECT.logError("Link");
            loadedLinks.add(link);
        }
        Link savedLink = linkRepository.save(link);

        if (savedLink != link) {
            link.copyAutogeneratedValues(savedLink);
        }
        return link;
    }


    @Override
    public void addToLoaded(Link instance) {
        if (null == instance) {
            SequenceStatus.NULL_POINTER.logError("addToLoaded", "instance");
            throw new NullPointerException();
        }
        if (loadedLinks.contains(instance)) {
            return;
        }
        loadedLinks.add(instance);
    }

    @Override
    public void unload(Link instance) {
        if (null == instance) {
            SequenceStatus.NULL_POINTER.logError("unload", "instance");
            throw new NullPointerException();
        }
        if (!loadedLinks.contains(instance)) {
            SequenceStatus.UNTRACKED_DB_OBJECT.logError("LinkService");
            return;
        }
        loadedLinks.remove(instance);
    }

    @Override
    public void drop(Link instance) {
        if (null == instance) {
            SequenceStatus.NULL_POINTER.logError("dropFromDB", "instance");
            throw new NullPointerException();
        }
        linkRepository.delete(instance);
    }

    @Override
    public SequenceStatus delete(Link instance) {
    //ToDo: Stop the queues
    //ToDo: Make synchronised
        if (null == instance) {
            SequenceStatus.NULL_POINTER.logError("delete", "Link instance");
            return SequenceStatus.NULL_POINTER;
        }
        Link loadedInstance = getLoaded(instance.getId());
        if (null == loadedInstance) {
            SequenceStatus.UNTRACKED_DB_OBJECT.logError("Link");
            throw new ArrayStoreException();
        }
        if (loadedInstance.getPortAid() != instance.getPortAid() ||
            loadedInstance.getPortZid() != instance.getPortZid()) {
            SequenceStatus.UNEXPECTED_FIELD_VALUE.logError(
                    "IDs that are equal to local", "Link instance", "delete");
            return SequenceStatus.UNEXPECTED_FIELD_VALUE;
        }
        loadedInstance.getConnA().getPort().setConnection(null);
        loadedInstance.getConnA().nullifyFields();
        loadedInstance.getConnZ().getPort().setConnection(null);
        loadedInstance.getConnZ().nullifyFields();
        loadedInstance.setUp(false);
        unload(loadedInstance);
        drop(loadedInstance);
        return SequenceStatus.OK;
    }

    public SequenceStatus linkComps (Link link) {
        if (null == link) {
            SequenceStatus.NULL_POINTER.logError("linkComps", "link");
            return SequenceStatus.NULL_POINTER;
        }
        Port portA = portService.getLoaded(link.getPortAid());
        Port portZ = portService.getLoaded(link.getPortZid());
        link.initLink(portA, portZ);

        portA.setConnection(link.getConnA());
        portZ.setConnection(link.getConnZ());

        create(link);
        return SequenceStatus.OK;
    }
}
