package com.edunetcracker.simulator.service;

import com.edunetcracker.simulator.database.repository.SceneRepository;
import com.edunetcracker.simulator.model.Scene;
import com.edunetcracker.simulator.service.status.SequenceStatus;
import lombok.Getter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import sun.reflect.generics.reflectiveObjects.NotImplementedException;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class SceneService extends DBService<Scene> {
    //Todo: Need to atomize the operations

    @Autowired
    private SceneRepository sceneRepository;


    private static final String SCENE_DEFAULT_NAME = "Sample Text";

    @Getter
    private List<Scene> loadedScenes = new ArrayList<>();

    @Override
    public Scene getLoaded(long id) {
        for (Scene scene : loadedScenes) {
            if (scene.getId() == id) {
                return scene;
            }
        }
        return null;
    }

    private Scene getLoadedByName(String name) {
        if (null == name) {
            SequenceStatus.NULL_POINTER.logError("getLoadedByName", "name");
            throw new NullPointerException();
        }
        for (Scene scene : loadedScenes) {
            if (name.equals(scene.getName())) {
                return scene;
            }
        }
        return null;
    }

    @Override
    public Scene get(long id) {
        Scene loadedScene = getLoaded(id);
        if (null != loadedScene) {
            return loadedScene;
        }
        Optional<Scene> newlyLoaded = sceneRepository.findById(id);
        if (!newlyLoaded.isPresent()) {
            SequenceStatus.NOT_FOUND_IN_DATABASE.logWarning("Scene", id);
            return null;
        }
        loadedScenes.add(newlyLoaded.get());
        return newlyLoaded.get();
    }

    public Scene getByName (String name) {
        if (null == name) {
            SequenceStatus.NULL_POINTER.logError("getByName", "name");
            throw new NullPointerException();
        }
        Scene loadedScene = getLoadedByName(name);
        if (null != loadedScene) {
            return loadedScene;
        }
        Optional<Scene> newlyLoaded = sceneRepository.findByName(name);
        return newlyLoaded.orElse(null);
    }

    @Override
    public SequenceStatus create(Scene scene) {
        if (null == scene) {
            SequenceStatus.NULL_POINTER.logError("saveNew", "scene");
            return SequenceStatus.NULL_POINTER;
        }
        long instanceId = scene.getId();
        if (instanceId != 0) {
            SequenceStatus.UNEXPECTED_FIELD_VALUE.logError("0", "ID", "Scene DTO");
        }

        if (null == scene.getName()) {
            scene.setName(SCENE_DEFAULT_NAME);
        }
        loadedScenes.add(scene);
        update(scene);
        return SequenceStatus.OK;
    }

    @Override
    public Scene update(Scene scene) {
        if (null == scene) {
            SequenceStatus.NULL_POINTER.logError("updateInDB", "scene");
            throw new NullPointerException();
        }
        if (null == getLoaded(scene.getId())) {
            SequenceStatus.UNTRACKED_DB_OBJECT.logError("Scene");
            loadedScenes.add(scene);
        }
        Scene savedScene = sceneRepository.save(scene);

        if (savedScene != scene) {
            scene.copyAutogeneratedValues(savedScene);
        }
        return scene;
    }

    @Override
    public void addToLoaded(Scene instance) {
        if (null == instance) {
            SequenceStatus.NULL_POINTER.logError("addToLoaded", "instance");
            throw new NullPointerException();
        }
        if (loadedScenes.contains(instance)) {
            return;
        }
        loadedScenes.add(instance);
    }

    @Override
    public void unload(Scene instance) {
        if (null == instance) {
            SequenceStatus.NULL_POINTER.logError("unload", "instance");
            throw new NullPointerException();
        }
        if (!loadedScenes.contains(instance)) {
            SequenceStatus.UNTRACKED_DB_OBJECT.logError("SceneService");
            return;
        }
        loadedScenes.remove(instance);
    }

    @Override
    public void drop(Scene instance) {
        if (null == instance) {
            SequenceStatus.NULL_POINTER.logError("dropFromDB", "instance");
            throw new NullPointerException();
        }
        sceneRepository.delete(instance);
    }

    @Override
    public SequenceStatus delete(Scene instance) {
        throw new NotImplementedException();
    }
}
