package com.edunetcracker.simulator.model.element;

import com.edunetcracker.simulator.model.port.SwitchPort;
import com.edunetcracker.simulator.service.status.SequenceStatus;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.util.List;

@Setter
@Getter
@Entity(name = "switch")
public class Switch extends NetworkElement {

    @OneToMany(mappedBy="switchEl",
               cascade=CascadeType.ALL,
               fetch=FetchType.LAZY)
    private List<SwitchPort> ports;

    Switch() {}

    Switch(int id) {
        super(id);
    }


    @Override
    public SequenceStatus copyRefs(NetworkElement another) {
        if (!(another instanceof Switch)) {
            SequenceStatus.PARAMETER_TYPE_INCONSISTENCY.logError("Switch");
            return SequenceStatus.PARAMETER_TYPE_INCONSISTENCY;
        }
        super.copyRefs(another);
        Switch anotherSwitch = (Switch)another;
        this.ports = anotherSwitch.ports;
        return SequenceStatus.OK;
    }

    @Override
    public SequenceStatus copyAutogeneratedValues(NetworkElement another) {
        if (!(another instanceof Switch)) {
            SequenceStatus.PARAMETER_TYPE_INCONSISTENCY.logError("Switch");
            return SequenceStatus.PARAMETER_TYPE_INCONSISTENCY;
        }
        super.copyAutogeneratedValues(another);
        return SequenceStatus.OK;
    }

    @Override
    protected void processContexts() {

    }

    @Override
    protected void processInputTraffic() {

    }

    @Override
    protected void processCommands() {

    }


    //    @Override
//    void performAction(Object action) {
//
//    }

}
