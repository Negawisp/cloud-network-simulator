package com.edunetcracker.simulator.model;

import com.edunetcracker.simulator.model.element.NetworkElement;
import com.edunetcracker.simulator.model.element.Router;
import com.edunetcracker.simulator.model.element.Switch;
import com.edunetcracker.simulator.service.status.SequenceStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.Setter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.persistence.*;
import java.util.*;

/**
 * A representation of a file the user is working with.
 */

@Getter
@Setter
@Entity(name = "scene")
public class Scene implements DBObject<Scene> {
    @Transient
    private Logger logger = LoggerFactory.getLogger(Scene.class);

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @JsonProperty
    private long id;

    @Column
    @JsonProperty
    private String name;

//ToDo! ToDo! ToDo-ToDo-ToDo! ToDo-ToDooooooooooooo-ToDo-DoDoDo!
//    @ManyToMany
//    private List<User> users;

    @OneToMany(mappedBy = "scene",
               cascade=CascadeType.ALL)
    private List<NetworkElement> networkElements;

    @OneToMany(mappedBy = "scene",
               cascade=CascadeType.ALL)
    private List<com.edunetcracker.simulator.model.Link> links;


    public Scene () {
        networkElements = new LinkedList<>();
        links = new LinkedList<>();
    }


    @Override
    public SequenceStatus copyRefs(Scene another) {
        networkElements = another.networkElements;
        links = another.links;
        return SequenceStatus.OK;
    }

    @Override
    public SequenceStatus copyAutogeneratedValues(Scene another) {
        id = another.id;
        return SequenceStatus.OK;
    }

    /**
     * Makes Components know that they are connected to each other with a wire, and saves the connection to
     * a running scene configuration.
     * @param id1 first Component
     * @param id2 second Component
     */
    public void link (long id1, long id2) {
    }

    /**
     * Instantiates a Router with the coordinates.
     * @return  The instance of a new Router.
     */
    public Router addRouter (long x, long y) {
        return null;
    }

    /**
     * Surprisingly, instantiates a Switch with the coordinates.
     * @return  The instance of a new Switch.
     */
    public Switch addSwitch (long x, long y) {
//        int id = sceneRepository.getFreeComponentID();
//        Switch newSwitch = new Switch(id);
//        newSwitch.move(x, y);
//        components.put(id, newSwitch);

        return null;
    }

    /**
     * Changes the coordinates of a Component with the given ID, if such Components exists at all.
     */
    public void moveComponent (long id, long newX, long newY) {

    }

}
