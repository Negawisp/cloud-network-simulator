package com.edunetcracker.simulator.model;

import com.edunetcracker.simulator.model.dataUnit.DataUnit;
import com.edunetcracker.simulator.model.dataUnit.IDataUnit;
import com.edunetcracker.simulator.model.port.Port;
import com.edunetcracker.simulator.service.LinkService;
import com.edunetcracker.simulator.service.status.SequenceStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.Setter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import javax.persistence.*;
import java.util.concurrent.ConcurrentLinkedQueue;

@Getter
@Setter
@Entity
public class Link implements DBObject<Link> {
    @Transient
    private Logger logger = LoggerFactory.getLogger(Link.class);

    @Autowired
    @Transient
    private LinkService linkService;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @JsonProperty
    private long id;

    @Column(name = "port_a")
    @JsonProperty
    private long portAid;

    @Column(name = "port_z")
    @JsonProperty
    private long portZid;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "scene", referencedColumnName = "id")
    private Scene scene;

    /*@OneToOne
    private long portId;*/

    @Transient
    private boolean isUp;

    @Transient
    private Connection connA;
    @Transient
    private Connection connZ;

    public void initLink(Port portA, Port portZ) {
        portAid = portA.getId();
        portZid = portZ.getId();

        connA = new Connection();
        connZ = new Connection();

        connA.setPort(portA);
        connZ.setPort(portZ);

        connA.setOppositeConn(connZ);
        connZ.setOppositeConn(connA);

        connA.setLink(this);
        connZ.setLink(this);

        connA.setIn(new ConcurrentLinkedQueue());
        connA.setOut(new ConcurrentLinkedQueue());

        connZ.setIn(connA.getOut());
        connZ.setOut(connA.getIn());

        start();
    }

    /**
     * Starts link
     */
    public void start() {
        isUp = true;
    }

    /**
     * Stops link
     */
    public void stop(){
        isUp = false;
    }


    @Override
    public SequenceStatus copyRefs(Link another) {
        scene = another.scene;
        connA = another.connA;
        connZ = another.connZ;
        return SequenceStatus.OK;
    }

    @Override
    public SequenceStatus copyAutogeneratedValues(Link another) {
        id = another.id;
        return SequenceStatus.OK;
    }

    @Getter
    @Setter
    public class Connection {
        Port port;
        Link link;
        Connection oppositeConn;

        //tasks from other Network entities
        ConcurrentLinkedQueue<DataUnit> in;
        ConcurrentLinkedQueue<DataUnit> out;

        public boolean isUp() {
            return isUp;
        }

        public void nullifyFields() {
            port = null;
            oppositeConn = null;
            in = null;
            out = null;
        }
    }

    /**
     * A redefined comparison method.
     * @return True, if otherObj is a Link that connects the same IDs (portOrder doesn't matter). False otherwise.
     */
    @Override
    public boolean equals (Object otherObj) {
        if (this == otherObj) {
            return true;
        }
        if (null == otherObj) {
            return false;
        }
        if (!(otherObj instanceof Link)) {
            return false;
        }
        Link otherLink = (Link)otherObj;
        return (otherLink.portAid == this.portAid && otherLink.portZid == this.portZid) ||
            (otherLink.portZid == this.portAid && otherLink.portAid == this.portZid);
    }
}
